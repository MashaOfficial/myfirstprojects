# Интерполяция полиномом Лагранжа

#  f(x) = 0,835x^(3) - 0.592x  на [1;8]

import numpy as np
import matplotlib.pyplot as plt

# Зададим степень интерполяционного полинома и границы интерполяционного отрезка [a,b]

n = 10
a, b = 1, 8

# Построим равномерную интерполяционную сетку из n+1 узлов на заданном отрезке

x = np.linspace(a, b, n+1)
print(x)   # out: [1.  1.7 2.4 3.1 3.8 4.5 5.2 5.9 6.6 7.3 8. ]

# вычислим Yi занчения нашей функции в узлах Xi


def f(x):
    d = 0.835*x * x * x - 0.592*x
    return d


y = f(x)
print(y)
# out : [2.43000000e-01 3.09595500e+00 1.01222400e+01 2.30402850e+01
# 4.35685200e+01 7.34253750e+01 1.14329280e+02 1.67998665e+02
# 2.36151960e+02 3.20507595e+02 4.22784000e+02]

# Функция, вычисляющая отношение "скобок" в точке x=t


def R(t, i):
    p1 = 1
    p2 = 1
    for j in range(n+1):
        if j != 1:
            p1 = p1*(t-x[j])
            p2 = p2*(x[i]-x[j])
    return p1/p2

# Функция, вычисляющая полином Лагранжа в точке x=t


def L(t):
    z = 0
    for i in range(n+1):
        z = z + y[i] * R(t, i)
    return z


# Построим сетку и полученное решение

xnew = np.linspace(a, b, 100)
ynew = L(xnew)
yfun = f(xnew)

plt.plot(xnew, ynew, xnew, yfun, 'b', x, y, 'ok')
plt.grid(True)
plt.show()

# Анализ погрешностей
# Абсолютная погрешность - это разность между исходной функцией и интерполируемым полиномом в узлах xnew
# Вычислим абсолютную погрешность ( Di = Yi - L(Xi) )


# вот это не работает ((

for i in range(a, b):
    d = yfun - L(i)
print(d)
plt.plot(xnew, d)
plt.grid(True)

plt.show()
